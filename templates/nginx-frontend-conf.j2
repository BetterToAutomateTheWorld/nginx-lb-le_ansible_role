# This file is generated automagically. Don't change, your changes will be overwrittern
#
# {{ ansible_managed }}
#

# {{ nginx_site.name }}

upstream frontend {
	ip_hash;
        server {{ front1_ip }}:80;
        server {{ front2_ip }}:80;
}

server {
{% if nginx_site.with_ssl %}
		listen 443 ssl
        {%- if nginx_site.is_default|default(False) %} default_server {% endif %};
{% endif %}
{% if not nginx_site.with_ssl or nginx_site.without_ssl|default(False) %}
        listen 80
        {%- if nginx_site.is_default|default(False) %} default_server {% endif %};
{% endif %}

		server_name {{ public_rp_ip }};
		# server_name {{ nginx_site.name }}; # Removed because actual failover
		access_log  /var/log/nginx/{{nginx_site.name}}-access_log main;
        error_log /var/log/nginx/{{nginx_site.name}}-error_log;
		server_tokens off;

{% if nginx_site.with_ssl %}        {#  FIXME: parametrize this #}
    {% if nginx_site.request_acme_cert %}
        ssl_certificate      /etc/pki/acme/{{ nginx_site.name }}/fullchain.pem;
        ssl_certificate_key  /etc/pki/acme/{{ nginx_site.name }}/key.pem;
    {% else %}
        ssl_certificate      /etc/pki/nginx/{{ nginx_site.name }}/cert.pem;
        ssl_certificate_key  /etc/pki/nginx/{{ nginx_site.name }}/key.pem;
    {% endif %}

        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_prefer_server_ciphers   on;
        ssl_protocols TLSv1.1 TLSv1.2; # not SSLv3.0because 'Poodle' exploit, Not TLSv1.0 because 'Ciphertext indistinguishability' exploit
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
		#'ssl_ciphers' improvments can be without => HIGH:!aNULL:!MD5;
        ssl_dhparam /etc/nginx/dhparams.pem;
{% endif %}

{% if 'http_basic_auth' in nginx_site %}
        # protected location
        auth_basic "{{ nginx_site.name }} password required";
        auth_basic_user_file {{ _nginx_host_passwd_file }};
{% endif %}

{% if nginx_site.root_config|default(None) %}
        # Using custom root_config
{{ nginx_site.root_config|indent(8) }}
        # end of custom root_config
{% else %}

        location / {
			proxy_pass http://frontend;
			proxy_set_header Host {{ public_rp_ip }};
			proxy_set_header Accept-Encoding "";
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-User $remote_user; # Added by role
			proxy_pass_header Access-Control-Allow-Origin;
			proxy_pass_header Access-Control-Allow-Methods;
			proxy_hide_header Access-Control-Allow-Headers;
			proxy_pass_header Authorization;
			add_header Access-Control-Allow-Headers 'X-Requested-With, Content-Type';
			add_header Access-Control-Allow-Credentials true;
			keepalive_timeout 0;
{% if 'http_basic_auth' in nginx_site %}
{% endif %}
                root {{ _nginx_root }};
                client_max_body_size    128m;
        }
{% endif %}
        # Add acme-challenge for LetsEncrypt
        location /.well-known/acme-challenge {
            alias /var/www/.well-known/acme-challenge;
        }

}

{% if nginx_site.with_ssl and not nginx_site.without_ssl|default(False) %}
# create port 80 redirect
server {
        listen 80
        {%- if nginx_site.is_default|default(False) %} default_server {% endif %};

		server_name {{ public_rp_ip }};
        # server_name {{ nginx_site.name }}; # Removed because actual failover

        access_log  /var/log/nginx/{{nginx_site.name}}-80-access_log main;
        error_log /var/log/nginx/{{nginx_site.name}}-80-error_log;

{% if nginx_site.http_root_config is defined%}
{{ nginx_site.http_root_config|indent(8) }}
{% else %}
        location / {
            return 301 https://$host$request_uri;
        }
{% endif %}

        # Add acme-challenge for LetsEncrypt
        location /.well-known/acme-challenge {
            alias /var/www/.well-known/acme-challenge;
        }
}
{% endif %}

{{ nginx_site.global_config|default('') }}
